@import "tailwindcss";

/* Configure dark mode directly in CSS */
@variant dark (.dark &);

/* Define custom CSS variables */
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 187 85% 53%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 187 85% 53%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 187 85% 53%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 187 85% 53%;
  }
}

/* Define custom Tailwind utilities using CSS variables */
@layer utilities {
  .bg-background {
    background-color: hsl(var(--background));
  }
  .bg-foreground {
    background-color: hsl(var(--foreground));
  }
  .bg-card {
    background-color: hsl(var(--card));
  }
  .bg-card-foreground {
    background-color: hsl(var(--card-foreground));
  }
  .bg-popover {
    background-color: hsl(var(--popover));
  }
  .bg-popover-foreground {
    background-color: hsl(var(--popover-foreground));
  }
  .bg-primary {
    background-color: hsl(var(--primary));
  }
  .bg-primary-foreground {
    background-color: hsl(var(--primary-foreground));
  }
  .bg-secondary {
    background-color: hsl(var(--secondary));
  }
  .bg-secondary-foreground {
    background-color: hsl(var(--secondary-foreground));
  }
  .bg-muted {
    background-color: hsl(var(--muted));
  }
  .bg-muted-foreground {
    background-color: hsl(var(--muted-foreground));
  }
  .bg-accent {
    background-color: hsl(var(--accent));
  }
  .bg-accent-foreground {
    background-color: hsl(var(--accent-foreground));
  }
  .bg-destructive {
    background-color: hsl(var(--destructive));
  }
  .bg-destructive-foreground {
    background-color: hsl(var(--destructive-foreground));
  }

  .text-background {
    color: hsl(var(--background));
  }
  .text-foreground {
    color: hsl(var(--foreground));
  }
  .text-card {
    color: hsl(var(--card));
  }
  .text-card-foreground {
    color: hsl(var(--card-foreground));
  }
  .text-popover {
    color: hsl(var(--popover));
  }
  .text-popover-foreground {
    color: hsl(var(--popover-foreground));
  }
  .text-primary {
    color: hsl(var(--primary));
  }
  .text-primary-foreground {
    color: hsl(var(--primary-foreground));
  }
  .text-secondary {
    color: hsl(var(--secondary));
  }
  .text-secondary-foreground {
    color: hsl(var(--secondary-foreground));
  }
  .text-muted {
    color: hsl(var(--muted));
  }
  .text-muted-foreground {
    color: hsl(var(--muted-foreground));
  }
  .text-accent {
    color: hsl(var(--accent));
  }
  .text-accent-foreground {
    color: hsl(var(--accent-foreground));
  }
  .text-destructive {
    color: hsl(var(--destructive));
  }
  .text-destructive-foreground {
    color: hsl(var(--destructive-foreground));
  }

  .border-border {
    border-color: hsl(var(--border));
  }
  .border-input {
    border-color: hsl(var(--input));
  }
  .border-ring {
    border-color: hsl(var(--ring));
  }

  .rounded-lg {
    border-radius: var(--radius);
  }
  .rounded-md {
    border-radius: calc(var(--radius) - 2px);
  }
  .rounded-sm {
    border-radius: calc(var(--radius) - 4px);
  }
}

@layer base {
  * {
    border-color: hsl(var(--border));
  }
  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }
}

html {
  scroll-behavior: smooth;
}

.eachSection {
  scroll-margin-top: 80px;
}

/* All Custom Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes scaleOut {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.8);
  }
}

@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-180deg);
  }
  to {
    opacity: 1;
    transform: rotate(0deg);
  }
}

@keyframes bounce {
  0%,
  20%,
  53%,
  80%,
  100% {
    transform: translate3d(0, 0, 0);
  }
  40%,
  43% {
    transform: translate3d(0, -30px, 0);
  }
  70% {
    transform: translate3d(0, -15px, 0);
  }
  90% {
    transform: translate3d(0, -4px, 0);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    opacity: 1;
    box-shadow: 0 0 0 0 rgba(21, 211, 224, 0.7);
  }
  50% {
    opacity: 0.8;
    box-shadow: 0 0 0 4px rgba(21, 211, 224, 0);
  }
}

@keyframes wiggle {
  0%,
  7% {
    transform: rotateZ(0);
  }
  15% {
    transform: rotateZ(-15deg);
  }
  20% {
    transform: rotateZ(10deg);
  }
  25% {
    transform: rotateZ(-10deg);
  }
  30% {
    transform: rotateZ(6deg);
  }
  35% {
    transform: rotateZ(-4deg);
  }
  40%,
  100% {
    transform: rotateZ(0);
  }
}

@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  10%,
  30%,
  50%,
  70%,
  90% {
    transform: translateX(-10px);
  }
  20%,
  40%,
  60%,
  80% {
    transform: translateX(10px);
  }
}

@keyframes flip {
  from {
    transform: perspective(400px) rotateY(-360deg);
  }
  to {
    transform: perspective(400px) rotateY(0deg);
  }
}

@keyframes heartbeat {
  0% {
    transform: scale(1);
  }
  14% {
    transform: scale(1.3);
  }
  28% {
    transform: scale(1);
  }
  42% {
    transform: scale(1.3);
  }
  70% {
    transform: scale(1);
  }
}

@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-20px);
  }
}

@keyframes glow {
  from {
    text-shadow: 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #15d3e0;
  }
  to {
    text-shadow: 0 0 20px #fff, 0 0 30px #15d3e0, 0 0 40px #15d3e0;
  }
}

/* Animation Utilities */
@layer utilities {
  /* Fade Animations */
  .animate-fadeIn {
    animation: fadeIn 0.6s ease-out forwards;
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .animate-fadeInDown {
    animation: fadeInDown 0.6s ease-out forwards;
  }

  .animate-fadeInLeft {
    animation: fadeInLeft 0.6s ease-out forwards;
  }

  .animate-fadeInRight {
    animation: fadeInRight 0.6s ease-out forwards;
  }

  /* Slide Animations */
  .animate-slideInUp {
    animation: slideInUp 0.6s ease-out forwards;
  }

  .animate-slideInDown {
    animation: slideInDown 0.6s ease-out forwards;
  }

  .animate-slideInLeft {
    animation: slideInLeft 0.6s ease-out forwards;
  }

  .animate-slideInRight {
    animation: slideInRight 0.6s ease-out forwards;
  }

  /* Scale Animations */
  .animate-scaleIn {
    animation: scaleIn 0.6s ease-out forwards;
  }

  .animate-scaleOut {
    animation: scaleOut 0.6s ease-out forwards;
  }

  /* Rotate Animations */
  .animate-rotateIn {
    animation: rotateIn 0.6s ease-out forwards;
  }

  /* Interactive Animations */
  .animate-bounce {
    animation: bounce 1s infinite;
  }

  .animate-pulse {
    animation: pulse 2s infinite;
  }

  .animate-pulse-glow {
    animation: pulse-glow 2s infinite;
  }

  .animate-wiggle {
    animation: wiggle 1s ease-in-out infinite;
  }

  .animate-shake {
    animation: shake 0.5s ease-in-out infinite;
  }

  .animate-flip {
    animation: flip 1s ease-in-out;
  }

  .animate-heartbeat {
    animation: heartbeat 1.5s ease-in-out infinite;
  }

  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  .animate-glow {
    animation: glow 2s ease-in-out infinite alternate;
  }

  /* Legacy animation names for compatibility */
  .animate-fadeOne {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .animate-fadeTwo {
    animation: fadeInLeft 0.6s ease-out forwards;
  }

  .animate-fadeThree {
    animation: fadeInRight 0.6s ease-out forwards;
  }

  /* Delayed animations */
  .animate-delay-100 {
    animation-delay: 0.1s;
  }

  .animate-delay-200 {
    animation-delay: 0.2s;
  }

  .animate-delay-300 {
    animation-delay: 0.3s;
  }

  .animate-delay-500 {
    animation-delay: 0.5s;
  }

  .animate-delay-700 {
    animation-delay: 0.7s;
  }

  .animate-delay-1000 {
    animation-delay: 1s;
  }

  /* Animation durations */
  .animate-duration-300 {
    animation-duration: 0.3s;
  }

  .animate-duration-500 {
    animation-duration: 0.5s;
  }

  .animate-duration-700 {
    animation-duration: 0.7s;
  }

  .animate-duration-1000 {
    animation-duration: 1s;
  }

  .animate-duration-2000 {
    animation-duration: 2s;
  }

  /* Hover animations */
  .hover\:animate-bounce:hover {
    animation: bounce 1s infinite;
  }

  .hover\:animate-pulse:hover {
    animation: pulse 2s infinite;
  }

  .hover\:animate-wiggle:hover {
    animation: wiggle 1s ease-in-out infinite;
  }

  .hover\:animate-float:hover {
    animation: float 3s ease-in-out infinite;
  }

  .hover\:animate-glow:hover {
    animation: glow 2s ease-in-out infinite alternate;
  }
}

.navlist-menu {
  transition: top 0.3s ease-in-out;
}

@media (max-width: 640px) {
  .min-h-screen {
    min-height: 100vh;
    min-height: 100dvh;
  }
}

.transition-colors {
  transition-property: color, background-color, border-color,
    text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 300ms;
}

/* Additional transition utilities */
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-transform {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-opacity {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Hover effects */
.hover\:scale-105:hover {
  transform: scale(1.05);
}

.hover\:scale-110:hover {
  transform: scale(1.1);
}

.hover\:-translate-y-1:hover {
  transform: translateY(-0.25rem);
}

.hover\:-translate-y-2:hover {
  transform: translateY(-0.5rem);
}

.hover\:rotate-3:hover {
  transform: rotate(3deg);
}

.hover\:rotate-6:hover {
  transform: rotate(6deg);
}

.hover\:rotate-12:hover {
  transform: rotate(12deg);
}

.hover\:skew-x-12:hover {
  transform: skewX(12deg);
}

.hover\:skew-y-3:hover {
  transform: skewY(3deg);
}

/* Focus effects */
.focus\:scale-105:focus {
  transform: scale(1.05);
}

.focus\:ring-2:focus {
  box-shadow: 0 0 0 2px hsl(var(--ring));
}

.focus\:ring-offset-2:focus {
  box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--ring));
}
